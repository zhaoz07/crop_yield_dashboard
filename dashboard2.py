# -*- coding: utf-8 -*-
"""dashboard1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U7Mwvs78uUzw6u4yM--jdvLPoP8Y6xx-
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.figure_factory as ff
import plotly.graph_objects as go
import pickle

st.set_page_config(page_title="Crop Yield Dashboard", layout="wide")

import gdown
import os


#@st.cache_data
#def load_data():
#   return pd.read_csv("crop_yield_sample.csv")


@st.cache_data
def load_data():
    url = 'https://drive.google.com/uc?id=10j6dyBOugXbPSW_NugJQwRLeAH-HsE09'
    output = 'crop_yield.csv'
    gdown.download(url, output, quiet=False, use_cookies=False)
    return pd.read_csv(output)


def load_model():
    with open("xgboost_model.pkl", "rb") as f:
        return pickle.load(f)


df = load_data()
model = load_model()

st.title("🌾 Crop Yield Analysis Dashboard")

# Key Stats — restored and improved
col1, col2= st.columns(2)
col1.metric("Mean Yield", f"{df['Yield_tons_per_hectare'].mean():.2f} tons/ha")
col2.metric("Unique Crops", f"{df['Crop'].nunique()}")

# st.markdown("---")

# Sidebar for global scenario setup
st.sidebar.markdown("""### ⚙️ Scenario Setup
Use the options below to customize your environment for prediction, simulation, and analysis.""")
region = st.sidebar.selectbox("Region", df['Region'].unique())
soil = st.sidebar.selectbox("Soil Type", df['Soil_Type'].unique())
crop = st.sidebar.selectbox("Crop", df['Crop'].unique())
rainfall = st.sidebar.slider("Rainfall (mm)", 100, 1000, 500)
temp = st.sidebar.slider("Temperature (°C)", 15, 40, 27)
fert = st.sidebar.checkbox("Fertilizer Used")
irrig = st.sidebar.checkbox("Irrigation Used")
weather = st.sidebar.selectbox("Weather Condition", df['Weather_Condition'].unique())
days = st.sidebar.slider("Days to Harvest", 60, 150, 104)

# Tabs
tab1, tab2, tab3 = st.tabs(["🧩 Variable Analysis", "🧠 Smart Prediction", "🎯 Recommendation"])

# ----------------- Tab 1 -----------------
with tab1:
    st.header("🧩 Variable Impact Analysis")

    st.markdown("### 🌾 Average Yield by Crop and Region (Heatmap)")
    heatmap_data = df.groupby(["Crop", "Region"])["Yield_tons_per_hectare"].mean().reset_index()
    pivot = heatmap_data.pivot(index="Crop", columns="Region", values="Yield_tons_per_hectare")
    z = np.round(pivot.values, 2)
    text = [[f"{val:.2f}" for val in row] for row in z]
    fig_heat = ff.create_annotated_heatmap(z=z, x=pivot.columns.tolist(), y=pivot.index.tolist(), colorscale='YlGnBu', annotation_text=text)
    fig_heat.update_layout(margin=dict(t=30, b=30), height=400)
    st.plotly_chart(fig_heat, use_container_width=True)

    st.markdown("### 🧱 Yield by Weather and Soil Type")
    col1, col2 = st.columns(2)
    with col1:
        weather_yield = df.groupby("Weather_Condition")["Yield_tons_per_hectare"].mean().reset_index()
        fig_weather = px.bar(weather_yield, x="Weather_Condition", y="Yield_tons_per_hectare",
                             color="Weather_Condition", title="Avg Yield by Weather",
                             color_discrete_sequence=["#7FDBFF", "#0074D9", "#39CCCC"]
                             )
        fig_weather.update_layout(height=350)
        st.plotly_chart(fig_weather, use_container_width=True)
    with col2:
        soil_yield = df.groupby("Soil_Type")["Yield_tons_per_hectare"].mean().reset_index()
        fig_soil = px.bar(soil_yield, x="Soil_Type", y="Yield_tons_per_hectare",
                          color="Soil_Type", title="Avg Yield by Soil Type",
                          color_discrete_sequence=["#9ACD32", "#6B8E23", "#556B2F", "#BDB76B", "#A2CD5A", "#7CFC00"])
        fig_soil.update_layout(height=350)
        st.plotly_chart(fig_soil, use_container_width=True)

    st.markdown("### 🌿 Fertilizer and Irrigation Effect (Grouped Bar)")
    treat_df = df.copy()
    treat_df["Fert_Label"] = treat_df["Fertilizer_Used"].replace({1: "Fertilizer", 0: "No Fertilizer"})
    treat_df["Irrig_Label"] = treat_df["Irrigation_Used"].replace({1: "Irrigation", 0: "No Irrigation"})
    col3, col4 = st.columns(2)
    with col3:
        fert_group = treat_df.groupby("Fert_Label")["Yield_tons_per_hectare"].mean().reset_index()
        fig_fert = px.bar(fert_group, x="Fert_Label", y="Yield_tons_per_hectare",
                          color="Fert_Label", title="Effect of Fertilizer",
                          color_discrete_sequence=["#90EE90", "#2E8B57"])
        fig_fert.update_layout(height=350)
        st.plotly_chart(fig_fert, use_container_width=True)
    with col4:
        irrig_group = treat_df.groupby("Irrig_Label")["Yield_tons_per_hectare"].mean().reset_index()
        fig_irrig = px.bar(irrig_group, x="Irrig_Label", y="Yield_tons_per_hectare",
                           color="Irrig_Label", title="Effect of Irrigation",
                           color_discrete_sequence=["#B0C4DE", "#1E90FF"])
        fig_irrig.update_layout(height=350)
        st.plotly_chart(fig_irrig, use_container_width=True)


# ----------------- Tab 2 -----------------
with tab2:
    st.header("🧠 Smart Prediction")
    st.info("Enter all variables to simulate a precise scenario.")
    input_df = pd.DataFrame({
        'Region': [region], 'Soil_Type': [soil], 'Crop': [crop], 'Rainfall_mm': [rainfall],
        'Temperature_Celsius': [temp], 'Fertilizer_Used': [int(fert)], 'Irrigation_Used': [int(irrig)],
        'Weather_Condition': [weather], 'Days_to_Harvest': [days]
    })
    for col in ['Region', 'Soil_Type', 'Crop', 'Weather_Condition']:
        le_map = {val: i for i, val in enumerate(df[col].unique())}
        input_df[col] = input_df[col].map(le_map)
    for col in ['Rainfall_mm', 'Temperature_Celsius', 'Days_to_Harvest']:
        input_df[col] = (input_df[col] - df[col].min()) / (df[col].max() - df[col].min())
    pred = model.predict(input_df)[0]

    st.metric("Predicted Yield", f"{pred:.2f} tons/ha")

    st.subheader("🔍 Feature Importance")
    try:
        importance = model.feature_importances_
        features = input_df.columns.tolist()
        feat_df = pd.DataFrame({"Feature": features, "Importance": importance})
        feat_df = feat_df.sort_values(by="Importance", ascending=True)

        fig_imp = px.bar(feat_df, x="Importance", y="Feature", orientation='h',
                         title="Model Feature Importance",
                         color="Importance", color_continuous_scale="Plasma")
        fig_imp.update_layout(height=400)
        st.plotly_chart(fig_imp, use_container_width=True)
    except Exception as e:
        st.warning("Feature importance could not be displayed: " + str(e))

# ----------------- Tab 3 -----------------
with tab3:
    st.header("🎯 Smart Recommendation & Simulation")
    st.info("We’ll recommend crops and treatments based on basic inputs like region and soil.")

    region_reco = region
    soil_reco = soil
    crop_reco = crop
    recommend_df = df[(df['Region'] == region_reco) & (df['Soil_Type'] == soil_reco)]

    st.subheader("📌 Input Summary")
    st.markdown(f"**Region:** {region_reco}  ")
    st.markdown(f"**Soil Type:** {soil_reco}  ")
    st.markdown(f"**Crop (optional):** {crop_reco}")

    st.subheader("📌 Key Stats")
    st.metric("Average Yield", f"{recommend_df['Yield_tons_per_hectare'].mean():.2f} tons/ha")
    st.subheader("🌾 Top Recommended Crops")
    top_crop = recommend_df.groupby("Crop")["Yield_tons_per_hectare"].mean().sort_values(ascending=False).head(3)
    for crop_name, yld in top_crop.items():
        st.write(f"✅ {crop_name}: {yld:.2f} tons/ha")
    st.subheader("🧪 Fertilizer Recommendation")
    fert_diff = recommend_df[recommend_df["Fertilizer_Used"]==1]["Yield_tons_per_hectare"].mean() - \
                recommend_df[recommend_df["Fertilizer_Used"]==0]["Yield_tons_per_hectare"].mean()
    if fert_diff > 0.3:
        st.success(f"💡 Fertilizer recommended: +{fert_diff:.2f} tons/ha")
    else:
        st.warning(f"⚠️ Minimal impact: +{fert_diff:.2f} tons/ha")
    st.subheader("💧 Irrigation Recommendation")
    irrig_diff = recommend_df[recommend_df["Irrigation_Used"]==1]["Yield_tons_per_hectare"].mean() - \
                 recommend_df[recommend_df["Irrigation_Used"]==0]["Yield_tons_per_hectare"].mean()
    if irrig_diff > 0.3:
        st.success(f"💡 Irrigation recommended: +{irrig_diff:.2f} tons/ha")
    else:
        st.warning(f"⚠️ Minimal impact: +{irrig_diff:.2f} tons/ha")
    st.subheader("🌡️ Temperature Simulation")
    import copy
    sim_input = recommend_df.iloc[0:1].copy()
    for col in ['Region', 'Soil_Type', 'Crop', 'Weather_Condition']:
        le_map = {val: i for i, val in enumerate(df[col].unique())}
        sim_input[col] = sim_input[col].map(le_map)
    for col in ['Rainfall_mm', 'Temperature_Celsius', 'Days_to_Harvest']:
        sim_input[col] = (sim_input[col] - df[col].min()) / (df[col].max() - df[col].min())
    temp_range = np.linspace(15, 40, 30)
    sim_yields = []
    for t in temp_range:
        sim_temp = sim_input.copy()
        sim_temp["Temperature_Celsius"] = (t - df['Temperature_Celsius'].min()) / (df['Temperature_Celsius'].max() - df['Temperature_Celsius'].min())
        y = model.predict(sim_temp.drop(columns=['Yield_tons_per_hectare'], errors='ignore'))[0]
        sim_yields.append(y)
    fig = px.line(x=temp_range, y=sim_yields, labels={'x': 'Temperature (°C)', 'y': 'Predicted Yield'},
                  title="Yield under Varying Temperature")
    st.plotly_chart(fig)
